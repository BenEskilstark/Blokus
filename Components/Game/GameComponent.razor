@inject LobbyService Lobby;
@inject IJSRuntime JSRuntime;

@using Blokus.DataStructures;
@using Coord = (int X, int Y);

@* <button class="btn btn-primary" @onclick="() => {}">Click me</button> *@

<div class="game">
    @for (int x = 0; x < CurGame?.Width; x++)
    {
        @for (int y = 0; y < CurGame?.Height; y++)
        {
            Coord pos = (x, y);
            <div class="square" style=@GetPosStyleStr(pos)
                onclick="@(() => Click(pos))"
                oncontextmenu="@(() => HandleRightClick(pos))"
                onmouseover="@(() => MouseOver(pos))"
            >
            </div>
        }
    }
    @foreach (Entity e in (CurGame?.Entities?.Entities?.Values ?? [])) {

        if (e.Name == "Block") {
            <div class="block" style=@(GetColorStyleStr(e) + GetPosStyleStr(e.Position)) />
        } 
        if (e.Name == "Piece") {
            foreach (Coord p in e.Cells) {
                Coord cpos = (p.X + e.Position.X, p.Y + e.Position.Y);
                <div class="block" style=@(GetColorStyleStr(e) + GetPosStyleStr(cpos) + "opacity: 50%;") 
                    onclick="@(() => Click(cpos))"
                    oncontextmenu="@(() => HandleRightClick(cpos))"
                    onmouseover="@(() => MouseOver(cpos))"
                />
            }
        }
        
    }
</div>

<style>
    body {
        margin: 0;
    }
    
    .game {
        width: 100%;
        height: 100vh;
        position: relative;
    }

    .square {
        border: 0.5px solid black;
        position: absolute;
        box-sizing: border-box;
        height: @(100.0 /(CurGame?.Height ?? 2))%;
        width: @(100.0 / (CurGame?.Width ?? 2))%;
    }

    .block {
        position: absolute;
        box-sizing: border-box;
        height: @(100.0 /(CurGame?.Height ?? 2))%;
        width: @(100.0 / (CurGame?.Width ?? 2))%;
    }
</style>

<script>
    document.addEventListener('contextmenu', function(event) {
        event.preventDefault();
    }, false);
</script>


@code {
    public Game CurGame { get; set; }
    public Player CurPlayer { get; set; }
    public Timer? Debouncer { get; set; }
    protected override void OnInitialized()
    {
        if (Lobby?.JoinedGame == null) return;
        CurPlayer = Lobby.Player;
        CurGame = Lobby.JoinedGame!;
        CurGame.Notify += () => InvokeAsync(StateHasChanged);
    }

    public void MouseOver(Coord pos) {
        Piece? playerPiece = CurGame.Entities.GetPlayerPiece(CurPlayer.PlayerID);
        if (playerPiece != null && playerPiece.Position == pos) return;
        if (playerPiece != null) {
            CurGame.Entities.Move(playerPiece, pos);
        }
        StateHasChanged();
        @* if (Debouncer != null ) {
            Debouncer.Dispose();
        }
        Debouncer = new((object? s) => DoMouseOver(pos), null, 300, System.Threading.Timeout.Infinite); *@
    }

    private void DoMouseOver(Coord pos) {
        Piece? playerPiece = CurGame.Entities.GetPlayerPiece(CurPlayer.PlayerID);
        if (playerPiece != null) {
            CurGame.Entities.Move(playerPiece, pos);
        }
        Debouncer = null;
        InvokeAsync(StateHasChanged);
    }

    public void HandleRightClick(Coord pos) {
        Piece? playerPiece = CurGame.Entities.GetPlayerPiece(CurPlayer.PlayerID);
        if (playerPiece != null) {
            playerPiece.RotateClockwise();
        }
        StateHasChanged();
    }

    public void Click(Coord p) {
        Piece? playerPiece = CurGame.Entities.GetPlayerPiece(CurPlayer.PlayerID);
        if (playerPiece == null) return;
        Coord pos = playerPiece.Position;
        bool canPlace = true;

        // check that you're not directly overlapping
        playerPiece.Cells.ForEach(c => {
            Entity? overlap = CurGame.Entities.Grid.At((pos.X + c.X, pos.Y + c.Y));
            if (overlap != null && overlap.Name != "Piece") canPlace = false;
        });
        if (!canPlace) return;

        // check that you are on a diagonal with your own block or at a corner
        canPlace = false;
        playerPiece.Cells.ForEach(c => {
            CurGame.Entities.Grid
                .GetDiagonalNeighbors((pos.X + c.X, pos.Y + c.Y))
                .ForEach(n => {
                    Entity? overlap = CurGame.Entities.Grid.At(n);
                    if (
                        overlap != null && overlap.Name == "Block" && 
                        overlap.PlayerID == CurPlayer.PlayerID
                    ) canPlace = true;
                    if (
                        n == (-1, -1) || 
                        n == (-1, CurGame.Height) ||
                        n == (CurGame.Width, -1) ||
                        n == (CurGame.Width, CurGame.Height)
                    ) canPlace = true;
                });
        });
        if (!canPlace) return;

        // check that you don't border your own blocks
        playerPiece.Cells.ForEach(c => {
            CurGame.Entities.Grid
                .GetNeighbors((pos.X + c.X, pos.Y + c.Y))
                .ForEach(n => {
                    Entity? overlap = CurGame.Entities.Grid.At(n);
                    if (
                        overlap != null && overlap.Name == "Block" && 
                        overlap.PlayerID == CurPlayer.PlayerID
                    ) canPlace = false;
                });
        });
        if (!canPlace) return;

        // place the blocks:
        playerPiece.Cells.ForEach(c => {
            CurGame.Entities.Add(new Block() { 
                PlayerID = CurPlayer.PlayerID,
                Position = (pos.X + c.X, pos.Y + c.Y), 
                Color = CurPlayer.Color
            });
        });

        CurGame.Entities.OnAfterUpdate();
        StateHasChanged();

        // set next player piece:
        List<Func<Piece>> nextFn = [
            () => Piece.MakeT(CurPlayer.PlayerID, CurPlayer.Color),
            () => Piece.Makel(CurPlayer.PlayerID, CurPlayer.Color),
            () => Piece.MakeL(CurPlayer.PlayerID, CurPlayer.Color),
            () => Piece.MakeStairs(CurPlayer.PlayerID, CurPlayer.Color),
            () => Piece.MakeBoomerang(CurPlayer.PlayerID, CurPlayer.Color),

            () => Piece.Maket(CurPlayer.PlayerID, CurPlayer.Color),
            () => Piece.MakeFourL(CurPlayer.PlayerID, CurPlayer.Color),
            () => Piece.MakeBox(CurPlayer.PlayerID, CurPlayer.Color),
            () => Piece.MakeZ(CurPlayer.PlayerID, CurPlayer.Color),

            () => Piece.MakeLittleL(CurPlayer.PlayerID, CurPlayer.Color),
            () => Piece.MakeLittlel(CurPlayer.PlayerID, CurPlayer.Color),

            () => Piece.MakeTwo(CurPlayer.PlayerID, CurPlayer.Color),
            () => Piece.MakeOne(CurPlayer.PlayerID, CurPlayer.Color)
        ];
        List<int> weights = nextFn.Select(f => f().Cells.Count).ToList();
        CurGame.Entities
            .SetPlayerPiece(CurPlayer.PlayerID, nextFn.WeightedOneOf(weights)());
    }

    public string GetPosStyleStr(Coord pos)
    {
        return $"top: {100.0 * pos.Y / CurGame.Height}%; left: {100.0 * pos.X / CurGame.Width}%;";
    }
    public string GetColorStyleStr(Entity e) {
        return "background-color: "+ e.Color + ";";
    }
}