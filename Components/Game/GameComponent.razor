@inject LobbyService Lobby;
@inject IJSRuntime JSRuntime;

@using Blokus.DataStructures;
@using Coord = (int X, int Y);

<div style="width: 100%; max-width: 720px;">
    <h3>
        Player Turn: @CurGame?.GetCurPlayerTurn()?.Name 
        @(CurGame?.IsMyTurn(CurPlayer) == true ? "(That's you)" : "" )
    </h3>
    <div class="game" 
        @ref="focusableElement"
        tabindex="0" 
        @onkeydown="HandleKeyPress" @onkeydown:preventDefault="true" 
        style="outline:none;"
    >
        @for (int x = 0; x < CurGame?.Width; x++)
        {
            @for (int y = 0; y < CurGame?.Height; y++)
            {
                Coord pos = (x, y);
                <div class="square" style=@GetPosStyleStr(pos)
                    onclick="@(() => Click(pos))"
                    oncontextmenu="@(() => HandleRightClick(pos))"
                    onmouseover="@(() => MouseOver(pos))"
                >
                </div>
            }
        }
        @foreach (Entity e in (CurGame?.EntContext?.Entities?.Values ?? [])) {

            if (e.Name == "Block") {
                <div class="block" style=@(GetColorStyleStr(e) + GetPosStyleStr(e.Position)) />
            } 
            if (e.Name == "Piece") {
                foreach (Coord p in e.Cells) {
                    Coord cpos = (p.X + e.Position.X, p.Y + e.Position.Y);
                    <div class="block" style=@(GetColorStyleStr(e) + GetPosStyleStr(cpos) + "opacity: 50%;") 
                        onclick="@(() => Click(cpos))"
                        oncontextmenu="@(() => HandleRightClick(cpos))"
                        onmouseover="@(() => MouseOver(cpos))"
                    />
                }
            }
            
        }
    </div>
</div>


<style>
    body {
        margin: 0;
    }
    
    .game {
        width: 100%;
        max-width: 700px;
        height: 100vh;
        max-height: 700px;          
        position: relative;
    }

    .square {
        border: 0.5px solid black;
        position: absolute;
        box-sizing: border-box;
        height: @(100.0 /(CurGame?.Height ?? 2))%;
        width: @(100.0 / (CurGame?.Width ?? 2))%;
    }

    .block {
        position: absolute;
        box-sizing: border-box;
        height: @(100.0 /(CurGame?.Height ?? 2))%;
        width: @(100.0 / (CurGame?.Width ?? 2))%;
    }
</style>

<script>
    document.addEventListener('contextmenu', function(event) {
        event.preventDefault();
    }, false);
</script>


@code {
    public Game CurGame { get; set; }
    public Player CurPlayer { get; set; }
    public Timer? Debouncer { get; set; }
    private ElementReference focusableElement;
    protected override void OnInitialized()
    {
        if (Lobby?.JoinedGame == null) return;
        CurPlayer = Lobby.Player;
        CurGame = Lobby.JoinedGame!;
        CurGame.Notify += () => InvokeAsync(StateHasChanged);
    }

    public void MouseOver(Coord pos) {
        Piece? playerPiece = CurGame.EntContext.GetPlayerPiece(CurPlayer.PlayerID);
        if (playerPiece != null && playerPiece.Position == pos) return;
        if (playerPiece != null) {
            CurGame.EntContext.Move(playerPiece, pos);
        }
        StateHasChanged();
        @* if (Debouncer != null ) {
            Debouncer.Dispose();
        }
        Debouncer = new((object? s) => DoMouseOver(pos), null, 300, System.Threading.Timeout.Infinite); *@
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await focusableElement.FocusAsync();
        }
    }

    private void DoMouseOver(Coord pos) {
        Piece? playerPiece = CurGame.EntContext.GetPlayerPiece(CurPlayer.PlayerID);
        if (playerPiece != null) {
            CurGame.EntContext.Move(playerPiece, pos);
        }
        Debouncer = null;
        InvokeAsync(StateHasChanged);
    }

    public void HandleRightClick(Coord pos) {
        Piece? playerPiece = CurGame.EntContext.GetPlayerPiece(CurPlayer.PlayerID);
        if (playerPiece != null) {
            playerPiece.RotateClockwise();
        }
        StateHasChanged();
    }

    public void Click(Coord p) {
        if(CurGame.TryPlacePiece(CurPlayer)) {
            CurGame.EndTurn();
            StateHasChanged();
        }
    }

    public async Task HandleKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == " " || e.Code == "Space") 
        {
            CurGame.CyclePieceUp(CurPlayer);
            StateHasChanged();
        }
    }

    public string GetPosStyleStr(Coord pos)
    {
        return $"top: {100.0 * pos.Y / CurGame.Height}%; left: {100.0 * pos.X / CurGame.Width}%;";
    }
    public string GetColorStyleStr(Entity e) {
        return "background-color: "+ e.Color + ";";
    }
}