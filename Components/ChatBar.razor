
@inject IJSRuntime JSRuntime

<div style="display: flex; flex-direction: column; height: 100%;">
    <div class="chat" id="chatContainer">
        <div style="font-size: 18px"><b>Chat: </b></div>
        <br>
        @foreach (Chat message in ChatThread) {
            <div>
                <div><b>@message.Name</b>: </div>
                <div>
                    @message.Text
                </div>
                <br>
            </div>
        }
    </div>
    <div style="height: 80px; padding-top: 20px;">
        <input value=@Message @onkeydown="CheckEnterKey">
        <button 
            onclick=@(() => Send())    
        >Send</button>
    </div>
</div>


<style>
    .chat {
        border: 1px solid black;
        float: right;
        height: 100%;
        width: 263px;
        overflow-y: scroll;
    }
</style>

<script>
  function scrollToBottom(id) {
    var element = document.getElementById(id);
    if (element) {
        var lastChild = element.lastElementChild;
        if (lastChild) {
            lastChild.scrollIntoView({ behavior: 'smooth', block: 'end' });
        }
    }
  }
</script>


@code {
    [Parameter]
    public List<Chat> ChatThread { get; set; } = [];

    [Parameter]
    public Action<string> SendMessage { get; set; } = (chat) => {};

    public string Message { get; set; } = "";


    protected override void OnParametersSet() {
        StateHasChanged();
        _ = ScrollToBottom();
    }

    private void CheckEnterKey(KeyboardEventArgs e)
    {
        if (e.Code == "Enter" || e.Code == "NumpadEnter")
        {
            Send();
        } else if (e.Key.Length == 1) {
            Message += e.Key;
        } else if (e.Code == "Space") {
            Message += " ";
        } else if (e.Code == "Backspace" && !string.IsNullOrEmpty(Message)) {
            Message = Message.Remove(Message.Length - 1);
        }
    }

    public void Send() {
        SendMessage(Message);
        Message = "";
    }

    private async Task ScrollToBottom()
    {
        await Task.Delay(100);
        await JSRuntime.InvokeVoidAsync("scrollToBottom", "chatContainer");
    }
}